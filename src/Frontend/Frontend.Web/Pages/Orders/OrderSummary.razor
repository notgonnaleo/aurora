@page "/order-summary/{orderId}"
@using Backend.Domain.Entities.OrderHistories.Response
@using Backend.Domain.Entities.OrderItems.Response;
@using Backend.Domain.Entities.Orders.Response;
@using Backend.Domain.Entities.Products;
@using Backend.Domain.Enums.Orders;
@using Frontend.Web.Components.Orders.Table
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Orders;
@inject NavigationManager Navigator;
@inject OrderService _orderService;
@inject AuthenticationService _authenticationService;
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

@if(Items is not null && Items.Any())
{
    <aside class="right-sidebar @formCssClass">
        <Frontend.Web.Components.Orders.Forms.AddOrderMovement Order="OrderDetails" Items="Items" CollapseRightSidebar=collapseForm ToggleRightSidebar="ToggleForm" />
    </aside>

}

@code
{
    private bool collapseForm = true;
    private string? formCssClass => collapseForm ? null : "show-menu";
    private string? btnText => collapseForm ? "New" : "Hide menu";
    
    private void ToggleForm()
    {
        collapseForm = !collapseForm;
    }
}

<div class="container-fluid">
    @if (isLoading)
    {
        <Frontend.Web.Components.Loader.LoadingSpinner></Frontend.Web.Components.Loader.LoadingSpinner>
    }
    else
    {
        @if (OrderDetails is not null)
        {
            <div class="row">
                <div class="col-lg-4 d-flex align-items-stretch">
                    <div class="card w-100">
                        <div class="card-header">
                            <h6>Status #@OrderDetails.OrderCode</h6>
                            <h5>
                                <strong class="smart-link cursor-pointer">
                                    @OrderDetails.OrderStatus.OrderStatusName
                                </strong>
                            </h5>
                        </div>
                        <div class="card-body p-4">
                            <div class="center m-4">
                                <Frontend.Web.Components.Orders.OrderStatusBar.OrderStatusIcon Status="OrderDetails.OrderStatus" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-8 d-flex align-items-stretch">
                    <div class="card w-100">
                        
                        <div class="card-body p-4">
                            <h5 class="card-title fw-semibold mb-4">Actions</h5>
                            <div class="row text-center pt-4">
                            @code
                            {
                                private async Task Approve()
                                {
                                    var response = await _orderService.Approve(OrderDetails.TenantId.ToString(), OrderDetails.OrderId.ToString());
                                    if (response.Successful())
                                    {
                                        Navigator.NavigateTo(Navigator.Uri, true);
                                    }
                                }
                                private async Task Refund()
                                {
                                    var response = await _orderService.Refund(OrderDetails.TenantId.ToString(), OrderDetails.OrderId.ToString());
                                    if (response.Successful())
                                    {
                                        Navigator.NavigateTo(Navigator.Uri, true);
                                    }
                                }
                                private async Task Cancel()
                                {
                                    var response = await _orderService.Cancel(OrderDetails.TenantId.ToString(), OrderDetails.OrderId.ToString());
                                    if (response.Successful())
                                    {
                                        Navigator.NavigateTo(Navigator.Uri, true);
                                    }
                                }
                            }

                            @code
                            {
                                private void SendEmail()
                                {
                                    // ok
                                }
                            }

                            @if(OrderDetails.OrderStatus.OrderStatusId == (int)OrdersStatusEnums.Open)
                            {
                                <div class="col">
                                    <span><i class="ti ti-file-like fs-10 cursor-pointer"></i></span>
                                    <p class="smart-link cursor-pointer" @onclick="Approve">Aprovar</p>
                                </div>
                            }

                                @if (OrderDetails.OrderStatus.OrderStatusId == (int)OrdersStatusEnums.InProgress || 
                                OrderDetails.OrderStatus.OrderStatusId == (int)OrdersStatusEnums.PartiallyDone || 
                                OrderDetails.OrderStatus.OrderStatusId == (int)OrdersStatusEnums.Refunding ||
                                OrderDetails.OrderStatus.OrderStatusId == (int)OrdersStatusEnums.Overdue)
                                {
                                <div class="col">
                                    <span><i class="ti ti-truck fs-10 cursor-pointer"></i></span>
                                    <p class="smart-link cursor-pointer" @onclick="ToggleForm">Realizar movimentação</p>
                                </div>
                            }

                            @if (OrderDetails.OrderStatus.OrderStatusId == (int)OrdersStatusEnums.Done)
                            {
                                <div class="col">
                                    <span><i class="ti ti-arrow-back fs-10 cursor-pointer"></i></span>
                                    <p class="smart-link cursor-pointer" @onclick="Refund">Iniciar devolução</p>
                                </div>
                            }

                                <div class="col">
                                    <span><i class="ti ti-file-description fs-10 cursor-pointer"></i></span>
                                    <p class="smart-link cursor-pointer">Relatório</p>
                                </div>
                                <div class="col">
                                    <span><i class="ti ti-mail fs-10 cursor-pointer"></i></span>
                                    <p class="smart-link cursor-pointer">Email</p>
                                </div>
                                <div class="col">
                                    <span><i class="ti ti-file-off fs-10 cursor-pointer"></i></span>
                                        <p class="smart-link cursor-pointer" @onclick="Cancel">Recusar</p>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="row">
                <div class="col-lg-8 d-flex align-items-stretch">
                    <div class="card w-100">
                        <div class="card-body p-4">
                            <h5 class="text card-title fw-semibold mb-5">Payment & Deadline</h5>

                            <div class="row text-center mb-4 align-items-center">
                                <div class="col">
                                    <p><strong>Cliente:</strong></p>
                                    <p>@OrderDetails.Customer.Agent.Name</p>
                                </div>
                                <div class="col">
                                    <p><strong>Emissor:</strong></p>
                                    <p>Aurora</p>
                                </div>
                                <div class="col">
                                    <p><strong>Responsável</strong></p>
                                    <p>@OrderDetails.Seller.Agent.Name</p>
                                </div>
                            </div>

                            <div class="row text-center mb-4 align-items-center">
                                <div class="col">
                                    <p><strong>Método de Pagamento</strong></p>
                                    <p>Cartão</p>
                                </div>
                                <div class="col">
                                    <p><strong>Total de Parcelas</strong></p>
                                    <p>@(OrderDetails.TotalParcels == null ? 10 : OrderDetails.TotalParcels)</p>
                                </div>
                            </div>

                            <div class="row text-center mb-4 align-items-center">
                                <div class="col">
                                    <p><strong>Data Estimada</strong></p>
                                    <p>@OrderDetails.OrderEstimatedDate</p>
                                </div>
                                <div class="col">
                                    <p><strong>Data de Abertura</strong></p>
                                    <p>@OrderDetails.OrderOpeningDate.Date</p>
                                </div>
                            </div>

                            <div class="row text-center mb-4 align-items-center">
                                <div class="col">
                                    <p><strong>Valor Total</strong></p>
                                    <p>@(OrderDetails.OrderTotalAmount == null ? 5000 : OrderDetails.OrderTotalAmount)</p>
                                </div>
                            </div>

                            @* <p>@OrderDetails.OrderParcelAmount</p>
                            <p>@OrderDetails.TotalParcels</p>
                            <p>@OrderDetails.OrderEffectiveDate</p>
                            <p>@OrderDetails.OrderEstimatedDate</p>   *@                          
                            
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 d-flex align-items-stretch">
                    <div class="card w-100">
                        <div class="card-body p-4">
                            <h5 class="text card-title fw-semibold mb-4">Contact</h5>
                            @if (OrderDetails.Customer.PhoneNumbers is not null &&
                           OrderDetails.Customer.EmailAddresses is not null &&
                           OrderDetails.Customer.Addresses is not null)
                            {
                                @foreach (var phone in OrderDetails.Customer.PhoneNumbers)
                                {
                                    <p>@phone.PhoneNumber</p>
                                }
                                @foreach (var email in OrderDetails.Customer.EmailAddresses)
                                {
                                    <p>@email.EmailAddress</p>
                                }
                                @foreach (var addr in OrderDetails.Customer.Addresses)
                                {
                                    <p>@addr.CityName @addr.Reference, @addr.CountryName</p>
                                }
                            }

                            <div class="mb-4">
                                <p class="d-inline"><strong>Customer Name:</strong></p>
                                <p class="d-inline ml-2">@OrderDetails.Customer.Agent.Name</p>
                            </div>
                            <div class="mb-4">
                                <p class="d-inline"><strong>Seller Name:</strong></p>
                                <p class="d-inline ml-2">@OrderDetails.Seller.Agent.Name</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (Logs is not null && Logs.Any())
            {
                <div class="row">
                    <div class="m-4">
                        <button class="btn btn-outline-primary" @onclick="ToggleForm">
                            New entry
                        </button>
                    </div>
                    <div class="card card-body">
                        <Frontend.Web.Components.Orders.Table.OrderLogsTable Logs="Logs"></Frontend.Web.Components.Orders.Table.OrderLogsTable>
                    </div>
                </div>
            }
            <div class="row">
                <div class="card card-body">
                    <Frontend.Web.Components.Orders.Table.ItemsTableReview ItemList="Items" />
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <Frontend.Web.Components.Placeholders.EmptyMessages.EmptyListVersionA></Frontend.Web.Components.Placeholders.EmptyMessages.EmptyListVersionA>
            </div>
        }
    }
</div>

@code {
    public bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await GetOrder();

        if (OrderDetails is not null) 
            MapItems(OrderDetails.OrderItems);

        if(!(OrderDetails.OrderStatus.OrderStatusId == (int)OrdersStatusEnums.Open)) 
            await GetLogs();

        isLoading = false;
    }

    [Parameter] public string orderId { get; set; }
    private OrderResponse? OrderDetails = null;
    private List<ItemThumbnail>? Items = null;

    private void MapItems(IEnumerable<OrderItemsResponse>? orderItems)
    {
        Items = new List<ItemThumbnail>();
        foreach (var item in orderItems)
        {
            Items.Add(new ItemThumbnail()
            {
                OrderItemId = item.OrderItemId,
                ItemName = item.Item.Name,
                ProductId = item.Item.ProductId,
                Quantity = item.ItemQuantity,
                VariantId = item.ItemVariant != null ? item.ItemVariant.VariantId : null,
                ItemValue = Convert.ToDecimal(item.Item.Value),
                Value = item.ItemTotalAmount
            });
        }
    }

    private async Task GetOrder()
    {
        var context = await _authenticationService.GetContext();
        var response = await _orderService.GetOrder(context.Tenant.Id.ToString(), orderId.ToString(), null);
        if (response.Successful())
        {
            OrderDetails = response.Result;
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }
    }

    private IEnumerable<OrderMovementEntryHistoryResponse>? Logs = null;
    private async Task GetLogs()
    {
        var context = await _authenticationService.GetContext();
        var response = await _orderService.GetOrderLogs(context.Tenant.Id.ToString(), orderId.ToString());
        if (response.Successful())
        {
            Logs = response.Result;
        }
    }
}
