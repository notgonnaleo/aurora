@page "/order-summary/{orderId}"
@using Backend.Domain.Entities.OrderItems.Response;
@using Backend.Domain.Entities.Orders.Response;
@using Backend.Domain.Entities.Products;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Orders;
@inject OrderService _orderService;
@inject AuthenticationService _authenticationService;
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

<PageTitle>Aurora - Order Summary</PageTitle>
<div class="container-fluid">
    @if (isLoading)
    {
        <Frontend.Web.Components.Loader.LoadingSpinner></Frontend.Web.Components.Loader.LoadingSpinner>
    }
    else
    {
        @if (OrderDetails is not null)
        {
            <div class="row">
                <div class="col-lg-4 d-flex align-items-stretch">
                    <div class="card w-100">
                        <div class="card-header">
                            <h6>Status</h6>
                            <h5>
                                <strong class="smart-link cursor-pointer">
                                    @OrderDetails.OrderStatus.OrderStatusName
                                </strong>
                            </h5>
                        </div>
                        <div class="card-body p-4">
                            <div class="center m-4">
                                <Frontend.Web.Components.Orders.OrderStatusBar.OrderStatusIcon Status="OrderDetails.OrderStatus" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-8 d-flex align-items-stretch">
                    <div class="card w-100">
                        <div class="card-body p-4">
                            <h5 class="card-title fw-semibold mb-4">Actions</h5>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-8 d-flex align-items-stretch">
                    <div class="card w-100">
                        <div class="card-body p-4">
                            <h5 class="card-title fw-semibold mb-4">Payment & Deadline</h5>
                            @OrderDetails.OrderParcelAmount
                            @OrderDetails.TotalParcels
                            @OrderDetails.OrderTotalAmount
                            @OrderDetails.OrderEffectiveDate
                            @OrderDetails.OrderEstimatedDate
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                adicionar card de contato etc
            </div>
            <div class="row">
                <div class="card card-body">
                    <Frontend.Web.Components.Orders.Table.ItemsTableReview ItemList="Items" />
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <Frontend.Web.Components.Placeholders.EmptyMessages.EmptyListVersionA></Frontend.Web.Components.Placeholders.EmptyMessages.EmptyListVersionA>
            </div>
        }
    }
</div>

@code {
    public bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await GetOrder();
        if(OrderDetails is not null)
        {
            MapItems(OrderDetails.OrderItems);
        }
        isLoading = false;
    }

    [Parameter] public string orderId { get; set; }
    private OrderResponse? OrderDetails = null;
    private List<ItemThumbnail>? Items = null;

    private void MapItems(IEnumerable<OrderItemsResponse>? orderItems)
    {
        Items = new List<ItemThumbnail>();
        foreach (var item in orderItems)
        {
            Items.Add(new ItemThumbnail()
            {
                ItemName = item.Item.Name,
                ProductId = item.Item.ProductId,
                Quantity = item.ItemQuantity,
                VariantId = item.ItemVariant != null ? item.ItemVariant.VariantId : null
            });
        }
    }

    private async Task GetOrder()
    {
        var context = await _authenticationService.GetContext();
        var response = await _orderService.GetOrder(context.Tenant.Id.ToString(), orderId.ToString(), null);
        if (response.Successful())
        {
            OrderDetails = response.Result;
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }
    }
}
