@page "/products/edit/{productId}"
@using Backend.Domain.Entities.Products;
@using Frontend.Web.Models.Client
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Products;
@inject NavigationManager NavigationManager
@inject ProductService _productService
@inject AuthenticationService _authenticationService;
@inject Sotsera.Blazor.Toaster.IToaster Toaster

<aside class="right-sidebar @formCssClass">
    @if (isVariantSidebar)
    {
        <Frontend.Web.Components.ProductVariants.Forms.Add.AddProductVariant CollapseRightSidebar=collapseProductVariantForm
                                                                             ToggleRightSidebar="ToggleProductVariantForm"
                                                                             ParentProductDetail="@Model.Result"
                                                                             SelectedItemVariantt="SelectedItemVariantt"/>
    }
</aside>
<div class="container-fluid">
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb bg-info-subtle px-3 py-2 rounded">
            <li class="breadcrumb-item">
                <a href="/" class="text-info d-flex align-items-center">
                    <i class="ti ti-home fs-4 mt-1"></i>
                </a>
            </li>
            <li class="breadcrumb-item">
                <a href="/products" class="text-info">Products</a>
            </li>
            <li class="breadcrumb-item">
                <a href="/products/edit/@productId" class="text-info"><strong>@Model!.Result!.SKU - @Model!.Result!.Name</strong></a>
            </li>
        </ol>
    </nav>
    @if (Model.Result is null && isLoading)
    {
        <Frontend.Web.Components.Loader.LoadingSpinner></Frontend.Web.Components.Loader.LoadingSpinner>
    }
    else
    {
        @if (Model.StatusCode == 200)
        {
            <a class="btn btn-outline-primary" href="/report/@Model.Result!.TenantId.ToString()/product-summary/@productId">Gerar Relatório</a>
            <br />
            <br />
            <Frontend.Web.Components.Products.Forms.Edit.EditProduct Model="@Model.Result" />

            <button class="btn btn-outline-primary" @onclick="AddVariant">
                @btnText
            </button>
            <br />
            <br />
            <Frontend.Web.Components.ProductVariants.Table.ProductVariantsTable parentProductId="@productId"  ShowModal="ShowVariantModal" SelectedItemVariant="EditVariant"/>
        }
        else
        {
            <Frontend.Web.Components.Placeholders.EmptyMessages.EmptyListVersionA></Frontend.Web.Components.Placeholders.EmptyMessages.EmptyListVersionA>
        }
    }
</div>

@code
{
    
    public void EditVariant(ProductVariant selectedItem)
    {
        SelectedItemVariantt = selectedItem;
        ToggleProductVariantForm();
    }

    public void AddVariant()
    {
        SelectedItemVariantt = null;
        ToggleProductVariantForm();
    }
}

@code
{
    public bool ShowVariantModal;

}

@code {
    private string? btnText = "Novo";
    public string? formCssClass = null;
    public bool isVariantSidebar = false;


    private bool collapseProductVariantForm = true;
    private void ToggleProductVariantForm()
    {
        ShowVariantModal = false;

        isVariantSidebar = true;
        collapseProductVariantForm = !collapseProductVariantForm;
        formCssClass = collapseProductVariantForm ? null : "show-menu";
        btnText = collapseProductVariantForm ? "Novo" : "Ocultar";
    }
}

@* @code
{
    private string? btnText = "New";
    public string? formCssClass = null;
    public bool isVariantSidebar = false;

    private bool collapseProductVariantForm = true;
    private void ToggleProductVariantForm()
    {
        isVariantSidebar = true;
        collapseProductVariantForm = !collapseProductVariantForm;
        formCssClass = collapseProductVariantForm ? null : "show-menu";
    }
} *@

@code
{
    public ProductDetail? selectedParentProduct = null;
    private void HandleCreateNewVariant(ProductDetail selectedProduct)
    {
        selectedParentProduct = selectedProduct;
        ToggleProductVariantForm();
    }
}

@code
{
    private bool isLoading = true;
    private ApiResponse<ProductDetail> Model = new ApiResponse<ProductDetail>();
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var context = await _authenticationService.GetContext();
        Model = await _productService.GetProductWithDetails(context!.Tenant.Id.ToString(), productId.ToString());
        if (Model.StatusCode != 200)
        {
            Toaster.Error(Model.ErrorMessage);
        }
        isLoading = false;
    }
}


@code
{
    [Parameter]
    public string productId { get; set; }

    [Parameter]
    public bool ShowModal { get; set; }

    [Parameter]
    public ProductVariant SelectedItemVariantt { get; set; }
}

