@using Backend.Domain.Entities.Categories;
@using Backend.Domain.Entities.Products;
@using Frontend.Web.Components.Products.Dropdowns
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Categories;
@using Frontend.Web.Services.Products;
@using Sotsera.Blazor.Toaster;

@inject NavigationManager navigator;
@inject CategoryService _categoryService;
@inject AuthenticationService _authenticationService;
@inject ProductVariantService _productVariantService;
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

<div class="modal fade @(ShowModal ? "show" : string.Empty)" id="bs-example-modal-md" tabindex="-1" style="@(ShowModal ? "display: block;" : "display: none;")" aria-labelledby="mySmallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header d-flex align-items-center">
                <h4 class="modal-title" id="myModalLabel">
                    Warning
                </h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="mb-2 col-sm-12">
                        <label for="productId" class="form-label">Item</label>
                        <div class="input-group">
                            <ProductDropdown Product="SetProduct" />
                            <button class="btn btn-primary" type="button" @onclick="AddItemCart">
                                Add
                            </button>
                        </div>
                        <label for="productId" class="form-label">Quantity</label>
                        <input class="form-control" type="number" @bind="ItemQuantity" />
                    </div>
                    <div class="row">
                        <div class="mb-2 col-sm-12 p-2">
                            <input type="checkbox" class="form-check-input primary" id="contact-check-all" @onclick="ShowVariantsDropdown">
                            <label>Insert product variant</label>
                        </div>
                    </div>
                    @if (isInsertVariant)
                    {
                        <div class="row">
                            <div class="mb-2 col-sm-12">
                                <Frontend.Web.Components.ProductVariants.Dropdowns.VariantDropdown SelectedProductId="selectedProduct.ProductId" Variant="SetVariant" />
                            </div>
                        </div>
                    }
                    @if (Items is not null)
                    {
                        <h1>preta</h1>
                        @foreach (var item in Items)
                        {
                            <p>@item.ItemSequence | @item.ItemName | @item.Quantity</p>
                        }
                    }
                </div>
            </div>
            
            @code
            {
                private int ItemQuantity = 0;
                private void AddItemCart()
                {
                    var count = Items is not null ? Items.Count() : 0;
                    if (selectedVariant is not null)
                    {
                        Items.Add(new ItemThumbnail() 
                        {
                            ProductId = selectedProduct.ProductId,
                            ItemName = selectedVariant.ProductName,
                            ItemSequence = count+1,
                            VariantId = selectedVariant.ProductId,
                            Quantity = ItemQuantity
                        });
                    }
                    else
                    {
                        Items.Add(new ItemThumbnail() 
                        {
                            ProductId = selectedProduct.ProductId,
                            ItemName = selectedProduct.ProductName,
                            ItemSequence = count+1, 
                            VariantId = null,
                            Quantity = ItemQuantity
                        });
                    }
                    ItemQuantity = 0;
                    selectedProduct = null;
                }
            }
            <div class="modal-footer">
                <button type="button" class="btn bg-info-subtle text-info font-medium waves-effect" data-bs-dismiss="modal" @onclick="CloseModal">
                    Close
                </button>
                <button type="button" class="btn bg-danger-subtle text-danger font-medium waves-effect" data-bs-dismiss="modal">
                    Confirm
                </button>
            </div>
        </div>
    </div>
</div>

@if (ShowModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code
{
    private List<ItemThumbnail> Items = new List<ItemThumbnail>();
    private IEnumerable<ProductVariant> variant = new List<ProductVariant>();

    private bool isInsertVariant = false;
    private void ShowVariantsDropdown() => isInsertVariant = !isInsertVariant;

    private bool isSelectingVariant = false;
}

@code
{
    private ProductThumbnail? selectedProduct = null;
    private ProductThumbnail? selectedVariant = null;

    private void SetProduct(ProductThumbnail product)
    {
        selectedProduct = product;
        if (selectedProduct is not null) OnProductChange();
    }
    private void SetVariant(ProductThumbnail variant) => selectedVariant = variant;

    private async Task OnProductChange()
    {
        var context = await _authenticationService.GetContext();
        var tenantId = context.Tenant.Id.ToString();
        var response = await _productVariantService.GetVariantsByProduct(context.Tenant.Id.ToString(), selectedProduct.ProductId.ToString());
        if (response.Successful())
        {
            variant = response.Result;
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }

    }
}

@code
{
    public void CloseModal() => ShowModal = !ShowModal;
}

@code
{
    [Parameter] public bool ShowModal { get; set; }
}
