@using Backend.Domain.Entities.Orders.Response;
@using Backend.Domain.Enums.Orders;
@using Backend.Domain.Enums.EnumExtensions;

<div class="scroll-sidebar" style="max-height: 550px; overflow-y: auto;">
    <ul class="sidebar-nav overflow-auto invoice-users simplebar-scrollable-y" data-simplebar="init">
        @if (Orders is not null)
        {
            @foreach (var order in Orders)
            {
                <li class="table-item-hover cursor-pointer" @onclick="() => PreviewOrder(order)">
                    <a class="sidebar-link p-3 bg-hover-light-black border-bottom d-flex align-items-start invoice-user listing-user" id="@order.OrderCode" data-invoice-id="@order.OrderCode">
                        @switch (order.OrderStatus.OrderStatusId)
                        {
                            case ((int)OrdersStatusEnums.Open):
                                <div class="btn btn-primary round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-clock fs-6"></i>
                                </div>
                                break;
                            case ((int)OrdersStatusEnums.Canceled):
                                <div class="btn btn-danger round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-clock-x fs-6"></i>
                                </div>
                                break;
                            case ((int)OrdersStatusEnums.Overdue):
                                <div class="btn btn-warning round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-clock-exclamation fs-6"></i>
                                </div>
                                break;
                            case ((int)OrdersStatusEnums.InProgress):
                                <div class="btn btn-primary round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-clock-play fs-6"></i>
                                </div>
                                break;
                            case ((int)OrdersStatusEnums.PartiallyDone):
                                <div class="btn btn-info round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-clock-up fs-6"></i>
                                </div>
                                break;
                            case ((int)OrdersStatusEnums.Done):
                                <div class="btn btn-success round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-clock-check fs-6"></i>
                                </div>
                                break;
                            case ((int)OrdersStatusEnums.Refunding):
                                <div class="btn btn-success round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-arrow-back fs-6"></i>
                                </div>
                                break;
                            default:
                                <div class="btn btn-primary round rounded-circle d-flex align-items-center justify-content-center px-2">
                                    <i class="ti ti-clock fs-6"></i>
                                </div>
                                break;
                        }
                       
                        <div class="ms-3 d-inline-block w-75">
                            <h6 class="mb-1 invoice-customer"><strong>#@order.OrderCode</strong></h6>
                            <span class="mb-1 fs-3 invoice-date text-nowrap text-body-color d-block">@order.OrderOpeningDate.ToShortDateString()</span>
                            @switch (order.OrderStatus.OrderStatusId)
                            {
                                case ((int)OrdersStatusEnums.Open):
                                    <span class="mb-1 badge rounded-pill text-bg-primary">@(((OrdersStatusEnums)order.OrderStatus.OrderStatusId).GetDescription())</span>
                                    break;
                                case ((int)OrdersStatusEnums.Canceled):
                                    <span class="mb-1 badge rounded-pill text-bg-danger">@(((OrdersStatusEnums)order.OrderStatus.OrderStatusId).GetDescription())</span>
                                    break;
                                case ((int)OrdersStatusEnums.Overdue):
                                    <span class="mb-1 badge rounded-pill text-bg-warning">@(((OrdersStatusEnums)order.OrderStatus.OrderStatusId).GetDescription())</span>
                                    break;
                                case ((int)OrdersStatusEnums.InProgress):
                                    <span class="mb-1 badge rounded-pill text-bg-primary">@(((OrdersStatusEnums)order.OrderStatus.OrderStatusId).GetDescription())</span>
                                    break;
                                case ((int)OrdersStatusEnums.PartiallyDone):
                                    <span class="mb-1 badge rounded-pill text-bg-info">@(((OrdersStatusEnums)order.OrderStatus.OrderStatusId).GetDescription())</span>
                                    break;
                                case ((int)OrdersStatusEnums.Done):
                                    <span class="mb-1 badge rounded-pill text-bg-success">@(((OrdersStatusEnums)order.OrderStatus.OrderStatusId).GetDescription())</span>
                                    break;
                                default:
                                    <span class="mb-1 badge rounded-pill text-bg-primary">@(((OrdersStatusEnums)order.OrderStatus.OrderStatusId).GetDescription())</span>
                                    break;
                            }
                        </div>
                    </a>
                </li>
            }
        }
    </ul>
</div>
@code
{
    private void PreviewOrder(OrderResponse order)
    {
        SelectedItem.InvokeAsync(order);
    }
}

@code 
{
    [Parameter]
    public IEnumerable<OrderResponse> Orders { get; set; }

    [Parameter]
    public EventCallback<OrderResponse> SelectedItem { get; set; }
}
