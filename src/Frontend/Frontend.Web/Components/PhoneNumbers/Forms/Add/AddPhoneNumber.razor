@using Backend.Domain.Entities.Authentication.Users.UserContext;
@using Backend.Domain.Entities.Categories;
@using Backend.Domain.Entities.Contacts;
@using Backend.Domain.Entities.SubCategories;
@using Backend.Domain.Enums.AreaCodes;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Categories;
@using Frontend.Web.Services.Contacts;
@using Frontend.Web.Services.SubCategories;
@inject AuthenticationService _authenticationService
@inject ContactService _contactService;
@inject NavigationManager navigator
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

<br />
<div>
    <i class="ti ti-x cursor-pointer p-2 text-black " style="font-size:20px" @onclick="ToggleRightSidebar"></i>
</div>
<div class="container scroll-sidebar" style="max-height:550px; overflow-y:auto;">
    <div class="card-body p-2">
        @if(Model is null)
        {
            // Create
            <form>
                <div class="mb-2 col-sm-12">
                    <div class="row">
                        <div class="mb-2 col-sm-4">
                            <label for="colors" class="form-label">Código da área</label>
                            <select class="form-select" @bind="@phoneNumber.AreaCode">
                                <option value="" disabled hidden selected>Código da área</option>
                                @foreach (var areaCode in AreaCode.Codes)
                                {
                                    <option value="@areaCode">@areaCode</option>
                                }
                            </select>
                        </div>
                        <div class="mb-2 col-sm-8">
                            <label for="name" class="form-label">Telefone</label>
                            <input type="number" class="form-control" id="number" placeholder="XXXXX-XXXX" @bind="@phoneNumber.PhoneNumber">
                        </div>
                    </div>
                </div>

                <div class="mb-2 col-sm-6">
                    <button @onclick="CreatePhoneNumber" type="button" class="btn btn-primary bottom-0 mb-9 mt-5 rounded">
                        Salvar <i class="ti ti-device-floppy"></i>
                    </button>
                </div>
            </form>
        }
        else
        {
            // Edit
            <form>
                <div class="mb-2 col-sm-12">
                    <div class="row">
                        <div class="mb-2 col-sm-4">
                            <label for="colors" class="form-label">Código da área</label>
                            <select class="form-select" @bind="@Model.AreaCode">
                                <option value="" disabled hidden selected>Código da área</option>
                                @foreach (var areaCode in AreaCode.Codes)
                                {
                                    <option value="@areaCode">@areaCode</option>
                                }
                            </select>
                        </div>
                        <div class="mb-2 col-sm-8">
                            <label for="name" class="form-label">Telefone</label>
                            <input type="number" class="form-control" id="number" placeholder="XXXXX-XXXX" @bind="@Model.PhoneNumber">
                        </div>
                    </div>
                </div>

                <div class="mb-2 col-sm-6">
                    <button @onclick="UpdatePhoneNumber" type="button" class="btn btn-primary bottom-0 mb-9 mt-5 rounded">
                        Salvar <i class="ti ti-device-floppy"></i>
                    </button>
                </div>
            </form>
        }
    </div>
</div>

@code
{
    private Phone phoneNumber = new Phone();
    public async Task CreatePhoneNumber()
    {
        var context = await _authenticationService.GetContext();
        phoneNumber.TenantId = context.Tenant.Id;
        phoneNumber.AgentId = AgentId;
        var response = await _contactService.CreatePhone(phoneNumber);
        if (response.Successful())
        {
            navigator.NavigateTo(navigator.Uri, true);
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }
    }

    public async Task UpdatePhoneNumber()
    {
        if(Model is not null)
        {
            var context = await _authenticationService.GetContext();
            Model.TenantId = context.Tenant.Id;
            Model.AgentId = AgentId;
            var response = await _contactService.UpdatePhone(Model);
            if (response.Successful())
            {
                navigator.NavigateTo(navigator.Uri, true);
            }
            else
            {
                Toaster.Error(response.ErrorMessage);
            }
        }

    }
}

@code
{
    [Parameter] public Guid AgentId { get; set; }
}

@code
{
    [Parameter] public Action ToggleRightSidebar { get; set; }
    [Parameter] public bool CollapseRightSidebar { get; set; }

    [Parameter] public Phone? Model { get; set; }
}