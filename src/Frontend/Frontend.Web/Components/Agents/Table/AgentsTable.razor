@using Backend.Domain.Entities.Agents;
@using Backend.Domain.Entities.Profiles
@using Backend.Domain.Enums.Agents
@using Frontend.Web.Components.Placeholders.EmptyMessages
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Agents;
@using Frontend.Web.Util.Session;
@using Frontend.Web.Services.Contacts;
@inject ContactService _contactService;
@inject AgentService _agentService;
@inject AuthenticationService _authenticationService;
@inject NavigationManager NavigationManager;
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

@if (isLoading)
{
    <Frontend.Web.Components.Loader.LoadingSpinner />
}
else
{
    @if (agents is not null && agents.Any())
    {
        @foreach (var agent in agents)
        {
            <div class="row justify-content-center mb-1">
                <div class="col-md-12 col-xl-10">
                    <div class="card shadow-0 zoom">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-9">
                                    <h5 class="smart-link mt-2" @onclick="() => Edit(agent)">@agent.Name</h5>
                                    <div class="d-flex flex-row justify-content-between">
                                        @foreach (var resul in profiles)
                                        {
                                            @if (agent.AgentId == resul.AgentId)
                                            {
                                                <span class="text-info mb-1 me-2 smart-link" @onclick="() => Edit(agent)">
                                                   <strong class="text-dark">CPF:</strong> @resul.CPF

                                                </span>
                                            }
                                        }
                                        <span class="mb-1 badge rounded-pill font-small bg-info-subtle text-info">
                                            @if (IdSelected == ((int)AgentTypes.Customer).ToString())
                                            {
                                                <span class="text-info">Customer</span>
                                            }
                                            else if (IdSelected == ((int)AgentTypes.Employee).ToString())
                                            {
                                                <span class="text-info">Employee</span>
                                            }
                                            else if (IdSelected == ((int)AgentTypes.Vendor).ToString())
                                            {
                                                <span class="text-info">Vendor</span>
                                            }
                                        </span>
                                    </div>
                                    <p class="mt-4 mb-4 mb-md-0 card-description">

                                    </p>
                                </div>
                                <div class="col-md-3 border-sm-start-none border-start d-flex flex-column">
                                    <div class="d-flex flex-column mt-4">
                                        <button data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-sm m-1" type="button" @onclick="() => Edit(agent)">
                                            <i class="ti ti-edit m-1"></i> Edit
                                        </button>
                                        <button data-mdb-button-init data-mdb-ripple-init class="btn btn-danger btn-sm m-1" type="button" @onclick="() => DeleteModalAction(agent)">
                                            <i class="ti ti-trash-x m-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    }
    else
    {
        <EmptyListVersionA />
    }
}

@if (selectedAgent is not null)
{
    <Frontend.Web.Components.Agents.Modals.DeleteAgent ShowModal="ShowModal" Model="selectedAgent" />
}

@code
{
    Agent? selectedAgent = null;
    public void DeleteModalAction(Agent agent)
    {
        ShowModal = true;
        selectedAgent = agent;
    }

}




@code {
    [Parameter] public string? IdSelected { get; set; }
    

    }

@code
{
    private bool isLoading = true;
    private IEnumerable<Agent>? agents;
    protected override async Task OnInitializedAsync()
    {

        await BuscarAgents();
        await Profile();


    }

    
    @code
    {
        private IEnumerable<Profile> profiles;
        public async Task Profile()
        {

            var context = await _authenticationService.GetContext();
            var responses = await _contactService.GetProfiles(context.Tenant.Id.ToString());
            profiles = responses.Result;
        }
    }
    public async Task BuscarAgents()
    {
        isLoading = true;
        var context = await _authenticationService.GetContext();
        

        var response = await _agentService.GetAgents(context.Tenant.Id.ToString());

        if (response.Successful())
        {
            if (!string.IsNullOrEmpty(IdSelected))
            {
                var id = Convert.ToInt32(IdSelected);
                agents = response.Result.Where(agent => agent.AgentTypeId == id);

                if (agents.Count() == 0)
                {
                    agents = response.Result;
                }
            }
            else
            {
                agents = response.Result;
            }
        }
        else
        {
            agents = null;
            Toaster.Warning(response.ErrorMessage);
        }
        isLoading = false;
    }

    private void Edit(Agent agent)
    {
        NavigationManager.NavigateTo($"/agents/edit/{agent.AgentId}");
    }

    [Parameter]
    public bool ShowModal { get; set; } = false;
    }
