@using Backend.Domain.Entities.Agents;   
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Agents;
@inject AgentService _agentService;
@inject NavigationManager navigator;
@inject AuthenticationService _authenticationService;
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

@if (isLoading)
{
    <Frontend.Web.Components.Loader.LoadingSpinner />
}
else
{
    <div class="row m-4">
        @if (Agent is not null && !isLoading)
        {
            <h5 class="card-title fw-semibold mb-4">Informações básicas</h5>
            <EditForm Model="Agent">
                <div class="mb-3 col-sm-12">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" id="name" placeholder="Name" @bind="@Agent.Name">
                </div>
                <div class="mb-3 col-sm-12">
                    <label for="agentTypes">Agent Type</label>
                    <select class="form-select" @bind="@Agent.AgentTypeId">
                        <option value="" disabled hidden selected>Atualize o tipo do agente</option>
                        @foreach (var agentType in agentTypes)
                        {
                            <option value="@agentType.AgentTypeId">@agentType.AgentTypeName</option>
                        }
                    </select>
                </div>
                <button type="button" @onclick="UpdateAgent" class="btn btn-primary float-right">Salvar</button>
            </EditForm>
        }
    </div>
}

@code
{
    [Parameter]
    public Agent? Agent { get; set; }
    public bool isLoading;
}

@code
{
    public List<AgentType> agentTypes = new List<AgentType>();
    public async Task GetAgentTypes()
    {
        var response = await _agentService.GetAgentTypes();
        agentTypes = response.Result.ToList();
    }
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await GetAgentTypes();
        isLoading = false;
    }
}

@code
{
    public async Task UpdateAgent()
    {
        // Objeto de navegacao ta atualizando o registro na agenttypes por isso ta dando merda - arrumar 
        Agent.AgentType = agentTypes.FirstOrDefault(x => x.AgentTypeId == Agent.AgentTypeId);
        var response = await _agentService.UpdateAgent(Agent);
        if (response.Success)
        {
            navigator.NavigateTo(navigator.Uri, true);
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }
    }
}
