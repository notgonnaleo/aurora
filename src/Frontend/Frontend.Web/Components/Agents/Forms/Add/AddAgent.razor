@using Backend.Domain.Entities.Agents
@using Frontend.Web.Services.Authentication
@using Frontend.Web.Services.Agents
@using Frontend.Web.Util.Session
@using Microsoft.AspNetCore.Components.Forms
@inject AgentService _agentService
@inject AuthenticationService _authenticationService
@inject NavigationManager navigator
@inject Sotsera.Blazor.Toaster.IToaster Toaster;

<div class="m-2 p-2">
    <i class="text ti ti-x cursor-pointer" @onclick="ToggleRightSidebar"></i>
</div>
<div class="container scroll-sidebar" style="max-height:550px; overflow-y:auto;">
    <div class="card-body p-2">
        <EditForm Model="@agent" >
            <div class="row">
                <div class="mb-2 col-sm-12">
                    <label for="name" class="form-label">Name</label>
                    <InputText class="form-control" id="name" placeholder="Agent Name" @bind-Value="@agent.Name" />
                </div>
            </div>
            <div class="mb-2 col-sm-12 p-2">
                <label for="colors" class="form-label">Agent Type</label>
                <select class="form-select" @bind="@agent.AgentTypeId">
                    <option value="0" disabled hidden selected>Select the type of agent</option>
                    @foreach (var agentType in agentTypes)
                    {
                        <option value="@agentType.AgentTypeId">@agentType.AgentTypeName</option>
                    }
                </select>
            </div>
            <div class="position-fixed bottom-0 mb-9 mt-5 rounded">
                <button type="button" @onclick="CreateAgent" class="btn btn-primary">Save <i class="ti ti-device-floppy"></i></button>
            </div>
        </EditForm>
    </div>
</div>

@code
{
    private Agent agent = new Agent();
    private async Task CreateAgent()
    {
        var context = await _authenticationService.GetContext();
        agent.TenantId = context.Tenant.Id;
        if(agent.AgentTypeId == 0)
        {
            Toaster.Warning("Agent type must be selected");
        }
        var response = await _agentService.CreateAgent(agent);
        if (response.Success)
        {
            Toaster.Success("Added");
            navigator.NavigateTo(navigator.Uri, true);
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }
    }
}

@code
{
    private List<AgentType> agentTypes = new List<AgentType>();
    protected override async Task OnInitializedAsync() => LoadAgentTypes();

    public async Task LoadAgentTypes()
    {
        var response = await _agentService.GetAgentTypes();
        if (response.Successful())
        {
            agentTypes = response.Result.ToList();
        }
    }
}

@code
{
    [Parameter] public Action ToggleRightSidebar { get; set; }
    [Parameter] public bool CollapseRightSidebar { get; set; }
}

@code
{
    @*Agent Accordion *@
    private bool collapseAgentAccordion = true;
    private string? agentAccordionHeaderToggle => collapseAgentAccordion ? null : "collapsed";
    private string? agentAccordionToggle => collapseAgentAccordion ? "collapse" : "collapse show";
    private void ToggleAgentAccordion() => collapseAgentAccordion = !collapseAgentAccordion;
}
