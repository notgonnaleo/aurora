@using Backend.Domain.Entities.Agents;
@using Backend.Domain.Enums.Agents
@using Frontend.Web.Services.Agents;
@using Frontend.Web.Services.Authentication;
@inject AgentService _agentService;
@inject AuthenticationService _authenticationService;

<label for="employeeId" class="form-label">Customer</label>
<select class="form-select" @onchange="OnCustomerChange">
    <option value="" disabled hidden selected>Select a Customer</option>
    @foreach (var agent in agents.Where(x => x.AgentTypeId == (int)AgentTypes.Customer))
    {
        <option value="@agent.AgentId">@agent.Name</option>
    }
</select>

@code
{
    private IEnumerable<Agent> agents = new List<Agent>();
    protected override async Task OnInitializedAsync()
    {
        var context = await _authenticationService.GetContext();
        var response = await _agentService.GetAgents(context.Tenant.Id.ToString());
        if (response.Successful())
        {
            agents = response.Result;
        }
    }
    private async Task OnCustomerChange(ChangeEventArgs e)
    {
        string selectedCustomerId = e.Value.ToString();
        await CustomerId.InvokeAsync(Guid.Parse(selectedCustomerId));
    }
}

@code
{
    [Parameter]
    public Guid SelectedCustomerId { get; set; }

    [Parameter]
    public EventCallback<Guid> CustomerId { get; set; }
}
