@using Backend.Domain.Entities.Authentication.Users.Login.Request;
@using Backend.Domain.Entities.Authentication.Users.UserContext;
@using Frontend.Web.Services.Authentication
@inject AuthenticationService _authenticationService;
@inject NavigationManager Navigator
@inject Sotsera.Blazor.Toaster.IToaster Toaster

<div class="card mb-0 col-lg-4 h-100 rounded-0">
    <div class="card-body rounded-0">
        @if (isLoading)
        {
            <div class="z-3 position absolute h-100 d-flex align-items-center justify-content-center">
                <Frontend.Web.Components.Loader.LoadingSpinner />
            </div>
        }
        else
        {
        <a class="text-nowrap logo-img text-center d-block py-3 w-100">
            <h3 class="panel-title"><strong>Aurora</strong></h3>
        </a>
        <p class="text-center">Acesse sua conta</p>

        @if (logged.HasValue && logged.Value)
        {
            <div class="alert alert-success fade-in" role="alert">
                Success, redirecting to main page.
            </div>
        }
        else if (logged.HasValue && !logged.Value)
        {
            <div class="alert alert-warning fade-in" role="alert">
                Something went wrong.
            </div>
        }
        <form>
            <div class="mb-3 w-100">
                <label for="username" class="form-label">Usuário</label>
                <input type="email" class="form-control" id="username" placeholder="Insira seu e-mail" @bind="@model.Username" @onkeydown="@Enter">
            </div>
            <div class="mb-4 w-100">
                <label for="password" class="form-label">Senha</label>
                <input type="password" class="form-control" id="password" placeholder="Insira sua senha" @bind="@model.Password" @onkeydown="@Enter">
            </div>
            <button type="button" @onclick="SignIn" class="btn btn-primary w-100 py-8 fs-4 mb-4 rounded-2 w-100">Login</button>
        </form>
        }
    </div>
</div>

@code
{
    public bool isLoading;

    public bool? logged;
    private LoginRequest model = new LoginRequest();
    protected override async Task OnInitializedAsync()
    {
        var response = await _authenticationService.IsUserLogged();
        if (response.Result)
            Navigator.NavigateTo(Navigator.BaseUri, true);
    }

    public async Task<bool> SignIn()
    {
        if (string.IsNullOrEmpty(model.Username) || string.IsNullOrEmpty(model.Password))
        {
            Toaster.Error("Username and password fields must be filled");
            throw new Exception("Fields are empty");
        }
        isLoading = true;
        try
        {
            logged = await _authenticationService.SignIn(model);
            Toaster.Success("User authorized successfully!");
            RedirectAfterSuccess(logged.Value);
            return logged.Value;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            isLoading = false;
            Toaster.Error("User authorized failled!");
            return false;
        }
    }

    public void RedirectAfterSuccess(bool logged)
    {
        if (logged)
        {
            Navigator.NavigateTo(Navigator.BaseUri, true);
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter" || e.Key == "Enter") SignIn();
    }
}
