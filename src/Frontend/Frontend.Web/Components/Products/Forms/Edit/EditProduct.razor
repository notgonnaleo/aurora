@using Backend.Domain.Entities.Products;
@using Backend.Domain.Enums.Colors;
@using Backend.Domain.Enums.MetricUnits;
@using Frontend.Web.Services.Authentication;
@using Frontend.Web.Services.Products;
@inject NavigationManager navigator
@inject ProductService _productService
@inject AuthenticationService _authenticationService;
@inject Sotsera.Blazor.Toaster.IToaster Toaster

@code
{

    public async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var format = "image/jpg";
        var resizeImage = await e.File.RequestImageFileAsync(format, 600, 600);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"{Convert.ToBase64String(buffer)}";
        //Model.ImageBuffer = imageData;
    }
}

<div>
    <div class="card p-4">
        <h5 class="card-title fw-semibold mb-4">Detalhes do item</h5>
        <div class="row">
            <div class="mb-3 col-md-3">
                @if(Model.MediaURL is null)
                {
                    <label for="productImage" class="custum-file-upload">
                        <div class="icon">
                            <i class="ti ti-upload"></i>
                        </div>
                        <div class="text">
                            <span>Upload de imagem</span>
                        </div>
                        <InputFile id="productImage" OnChange="HandleFileUpload" accept="image/*" />
                    </label>
                }
                else
                {
                    <img src="@Model.MediaURL" class="card-img rounded-12">
                    <InputFile id="productImage" OnChange="HandleFileUpload" accept="image/*" class="form-control mt-4" />
                }
            </div>
            <div class="col-md-9">
                <form>
                    <div class="row">
                        <div class="mb-3 col-sm-3">
                            <label for="username">SKU</label>
                            <input type="text" class="form-control" id="sku" placeholder="SKU" @bind="@Model.SKU" disabled>
                        </div>
                        <div class="mb-3 col-sm-3">
                            <label for="username">GTIN</label>
                            <input type="text" class="form-control" id="gtin" placeholder="GTIN" @bind="@Model.GTIN" disabled>
                        </div>
                        <div class="mb-3 col-sm-6">
                            <label for="name">Nome</label>
                            <input type="text" class="form-control" id="name" placeholder="Name" @bind="@Model.Name">
                        </div>
                    </div>
                    <div class="row">
                        <div class="mb-3 col-sm-6">
                            <label for="description">Descrição</label>
                            <textarea type="text" class="form-control" id="description" placeholder="Description" @bind="@Model.Description" />
                        </div>
                        <div class="mb-3 col-sm-3">
                            <label for="value">Valor</label>
                            <input type="number" class="form-control" id="value" placeholder="Value" @bind="@Model.Value">
                        </div>
                        <div class="mb-3 col-sm-3">
                            <label for="productType">Tipo do Produto</label>
                            <select class="form-select" @bind="@Model.ProductTypeId">
                                <option value="1">Máteria-Prima</option>
                                <option value="2">Componente</option>
                                <option value="3">Produto Final</option>
                            </select>
                        </div>
                        <div class="mb-3 col-sm-3">
                            <label for="productType">Cor primária</label>
                            <select class="form-select" @bind="@Model.ColorName">
                                <option selected>@Model.ColorName</option>
                                @foreach (var color in Colors.ColorList)
                                {
                                    <option value="@color">@color</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3 col-sm-3">
                            <label for="metricUnits" class="form-label">Unidade Métrica</label>
                            <select class="form-select" @bind="@Model.MetricUnitName">
                                <option selected>@Model.MetricUnitName</option>
                                @foreach (var unitType in MetricUnits.Measure.measurementUnitTypes)
                                {
                                    <option value="@unitType">@unitType</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="mb-3 col-sm-3">
                            <label for="liquidWeight">Peso Líquido</label>
                            <input type="number" class="form-control" id="liquidWeight" placeholder="Liquid Weight" @bind="@Model.LiquidWeight">
                        </div>
                        <div class="mb-3 col-sm-3">
                            <label for="totalWeight">Peso Bruto</label>
                            <input type="number" class="form-control" id="totalWeight" placeholder="Total Weight" @bind="@Model.TotalWeight">
                        </div>
                    </div>
                    <button type="button" @onclick="UpdateProduct" class="btn btn-primary float-right text-end">Salvar</button>
                </form>
            </div>
        </div>
    </div>
</div>

@code
{
    public async Task UpdateProduct()
    {
        var context = await _authenticationService.GetContext();
        Model.TenantId = context.Tenant.Id;
        var response = await _productService.UpdateProduct(Model);
        if (response.Successful())
        {
            navigator.NavigateTo(navigator.Uri, true);
            Toaster.Success("Updated successfully!");
        }
        else
        {
            Toaster.Error(response.ErrorMessage);
        }
    }
}

@code
{
    [Parameter] public ProductDetail Model {  get; set; }
}